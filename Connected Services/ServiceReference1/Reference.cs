//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SPWPF.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RoomDTO", Namespace="http://schemas.datacontract.org/2004/07/BLL")]
    [System.SerializableAttribute()]
    public partial class RoomDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameOfRoomField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int OwnerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RoomCodeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NameOfRoom {
            get {
                return this.NameOfRoomField;
            }
            set {
                if ((object.ReferenceEquals(this.NameOfRoomField, value) != true)) {
                    this.NameOfRoomField = value;
                    this.RaisePropertyChanged("NameOfRoom");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OwnerId {
            get {
                return this.OwnerIdField;
            }
            set {
                if ((this.OwnerIdField.Equals(value) != true)) {
                    this.OwnerIdField = value;
                    this.RaisePropertyChanged("OwnerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RoomCode {
            get {
                return this.RoomCodeField;
            }
            set {
                if ((this.RoomCodeField.Equals(value) != true)) {
                    this.RoomCodeField = value;
                    this.RaisePropertyChanged("RoomCode");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserDTO", Namespace="http://schemas.datacontract.org/2004/07/BLL")]
    [System.SerializableAttribute()]
    public partial class UserDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsUserOnlineField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> RoomIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsUserOnline {
            get {
                return this.IsUserOnlineField;
            }
            set {
                if ((this.IsUserOnlineField.Equals(value) != true)) {
                    this.IsUserOnlineField = value;
                    this.RaisePropertyChanged("IsUserOnline");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> RoomId {
            get {
                return this.RoomIdField;
            }
            set {
                if ((this.RoomIdField.Equals(value) != true)) {
                    this.RoomIdField = value;
                    this.RaisePropertyChanged("RoomId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1", CallbackContract=typeof(SPWPF.ServiceReference1.IService1Callback))]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RegisterNewUser", ReplyAction="http://tempuri.org/IService1/RegisterNewUserResponse")]
        bool RegisterNewUser(string userName, string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RegisterNewUser", ReplyAction="http://tempuri.org/IService1/RegisterNewUserResponse")]
        System.Threading.Tasks.Task<bool> RegisterNewUserAsync(string userName, string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/IsUserExistByLogin", ReplyAction="http://tempuri.org/IService1/IsUserExistByLoginResponse")]
        bool IsUserExistByLogin(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/IsUserExistByLogin", ReplyAction="http://tempuri.org/IService1/IsUserExistByLoginResponse")]
        System.Threading.Tasks.Task<bool> IsUserExistByLoginAsync(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/IsUserExistByEmail", ReplyAction="http://tempuri.org/IService1/IsUserExistByEmailResponse")]
        bool IsUserExistByEmail(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/IsUserExistByEmail", ReplyAction="http://tempuri.org/IService1/IsUserExistByEmailResponse")]
        System.Threading.Tasks.Task<bool> IsUserExistByEmailAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/JoinRoom", ReplyAction="http://tempuri.org/IService1/JoinRoomResponse")]
        SPWPF.ServiceReference1.RoomDTO JoinRoom(int userId, int roomCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/JoinRoom", ReplyAction="http://tempuri.org/IService1/JoinRoomResponse")]
        System.Threading.Tasks.Task<SPWPF.ServiceReference1.RoomDTO> JoinRoomAsync(int userId, int roomCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/LoginByEmail", ReplyAction="http://tempuri.org/IService1/LoginByEmailResponse")]
        SPWPF.ServiceReference1.UserDTO LoginByEmail(string hashedPass, string Email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/LoginByEmail", ReplyAction="http://tempuri.org/IService1/LoginByEmailResponse")]
        System.Threading.Tasks.Task<SPWPF.ServiceReference1.UserDTO> LoginByEmailAsync(string hashedPass, string Email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/LoginByLogin", ReplyAction="http://tempuri.org/IService1/LoginByLoginResponse")]
        SPWPF.ServiceReference1.UserDTO LoginByLogin(string hashedPass, string Login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/LoginByLogin", ReplyAction="http://tempuri.org/IService1/LoginByLoginResponse")]
        System.Threading.Tasks.Task<SPWPF.ServiceReference1.UserDTO> LoginByLoginAsync(string hashedPass, string Login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateNewRoom", ReplyAction="http://tempuri.org/IService1/CreateNewRoomResponse")]
        SPWPF.ServiceReference1.RoomDTO CreateNewRoom(int ownerId, string roomName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateNewRoom", ReplyAction="http://tempuri.org/IService1/CreateNewRoomResponse")]
        System.Threading.Tasks.Task<SPWPF.ServiceReference1.RoomDTO> CreateNewRoomAsync(int ownerId, string roomName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetChatMembersInRoom", ReplyAction="http://tempuri.org/IService1/GetChatMembersInRoomResponse")]
        SPWPF.ServiceReference1.UserDTO[] GetChatMembersInRoom(int roomCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetChatMembersInRoom", ReplyAction="http://tempuri.org/IService1/GetChatMembersInRoomResponse")]
        System.Threading.Tasks.Task<SPWPF.ServiceReference1.UserDTO[]> GetChatMembersInRoomAsync(int roomCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetRoomOwner", ReplyAction="http://tempuri.org/IService1/GetRoomOwnerResponse")]
        SPWPF.ServiceReference1.UserDTO GetRoomOwner(int roomCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetRoomOwner", ReplyAction="http://tempuri.org/IService1/GetRoomOwnerResponse")]
        System.Threading.Tasks.Task<SPWPF.ServiceReference1.UserDTO> GetRoomOwnerAsync(int roomCode);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Callback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateChatMembers", ReplyAction="http://tempuri.org/IService1/UpdateChatMembersResponse")]
        void UpdateChatMembers();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : SPWPF.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.DuplexClientBase<SPWPF.ServiceReference1.IService1>, SPWPF.ServiceReference1.IService1 {
        
        public Service1Client(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public Service1Client(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public Service1Client(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public bool RegisterNewUser(string userName, string email, string password) {
            return base.Channel.RegisterNewUser(userName, email, password);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterNewUserAsync(string userName, string email, string password) {
            return base.Channel.RegisterNewUserAsync(userName, email, password);
        }
        
        public bool IsUserExistByLogin(string login) {
            return base.Channel.IsUserExistByLogin(login);
        }
        
        public System.Threading.Tasks.Task<bool> IsUserExistByLoginAsync(string login) {
            return base.Channel.IsUserExistByLoginAsync(login);
        }
        
        public bool IsUserExistByEmail(string email) {
            return base.Channel.IsUserExistByEmail(email);
        }
        
        public System.Threading.Tasks.Task<bool> IsUserExistByEmailAsync(string email) {
            return base.Channel.IsUserExistByEmailAsync(email);
        }
        
        public SPWPF.ServiceReference1.RoomDTO JoinRoom(int userId, int roomCode) {
            return base.Channel.JoinRoom(userId, roomCode);
        }
        
        public System.Threading.Tasks.Task<SPWPF.ServiceReference1.RoomDTO> JoinRoomAsync(int userId, int roomCode) {
            return base.Channel.JoinRoomAsync(userId, roomCode);
        }
        
        public SPWPF.ServiceReference1.UserDTO LoginByEmail(string hashedPass, string Email) {
            return base.Channel.LoginByEmail(hashedPass, Email);
        }
        
        public System.Threading.Tasks.Task<SPWPF.ServiceReference1.UserDTO> LoginByEmailAsync(string hashedPass, string Email) {
            return base.Channel.LoginByEmailAsync(hashedPass, Email);
        }
        
        public SPWPF.ServiceReference1.UserDTO LoginByLogin(string hashedPass, string Login) {
            return base.Channel.LoginByLogin(hashedPass, Login);
        }
        
        public System.Threading.Tasks.Task<SPWPF.ServiceReference1.UserDTO> LoginByLoginAsync(string hashedPass, string Login) {
            return base.Channel.LoginByLoginAsync(hashedPass, Login);
        }
        
        public SPWPF.ServiceReference1.RoomDTO CreateNewRoom(int ownerId, string roomName) {
            return base.Channel.CreateNewRoom(ownerId, roomName);
        }
        
        public System.Threading.Tasks.Task<SPWPF.ServiceReference1.RoomDTO> CreateNewRoomAsync(int ownerId, string roomName) {
            return base.Channel.CreateNewRoomAsync(ownerId, roomName);
        }
        
        public SPWPF.ServiceReference1.UserDTO[] GetChatMembersInRoom(int roomCode) {
            return base.Channel.GetChatMembersInRoom(roomCode);
        }
        
        public System.Threading.Tasks.Task<SPWPF.ServiceReference1.UserDTO[]> GetChatMembersInRoomAsync(int roomCode) {
            return base.Channel.GetChatMembersInRoomAsync(roomCode);
        }
        
        public SPWPF.ServiceReference1.UserDTO GetRoomOwner(int roomCode) {
            return base.Channel.GetRoomOwner(roomCode);
        }
        
        public System.Threading.Tasks.Task<SPWPF.ServiceReference1.UserDTO> GetRoomOwnerAsync(int roomCode) {
            return base.Channel.GetRoomOwnerAsync(roomCode);
        }
    }
}
